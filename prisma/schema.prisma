generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Site {
  id              String         @id @default(cuid())
  name            String
  domain          String         @unique
  subdomain       String?        @unique
  description     String?
  logoUrl         String?
  isActive        Boolean        @default(true)
  packageType     SitePackage    @default(BASIC)
  featuresOrder   FeatureName[]
  colorPalette    String[]       @default(["#3B82F6", "#10B981", "#F59E0B"])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  features        SiteFeature[]
  hero            Hero?
  about           About[]
  categories      Category[]
  contact         Contact[]
  eventServices   EventService[]
  events          Event[]
  products        Product[]
  users           UserSite[]

  @@map("sites")
}

model User {
  id          String     @id @default(cuid())
  email       String     @unique
  auth0UserId String     @unique
  name        String?
  role        UserRole   @default(ADMIN)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  sites       UserSite[]

  @@map("users")
}

model UserSite {
  id     String   @id @default(cuid())
  userId String
  siteId String
  role   SiteRole @default(ADMIN)
  site   Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, siteId])
  @@map("user_sites")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  siteId      String
  site        Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)
  products    Product[]

  @@unique([name, siteId])
  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  imageUrls   String[] @default([])
  isActive    Boolean  @default(true)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  siteId      String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("products")
}

model About {
  id        String   @id @default(cuid())
  title     String
  content   String
  mission   String?
  vision    String?
  values    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  siteId    String
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("about")
}

model Contact {
  id           String   @id @default(cuid())
  businessName String
  email        String
  phone        String?
  address      String?
  city         String?
  province     String?
  zipCode      String?
  country      String?
  socialLinks  Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  siteId       String
  site         Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("contact")
}

model Hero {
  id          String   @id @default(cuid())
  title       String?
  subtitle    String?
  description String?
  imageUrl    String?
  videoUrl    String?
  ctaButton   String?
  ctaLink     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  siteId      String   @unique
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("heroes")
}

model Event {
  id           String    @id @default(cuid())
  title        String
  description  String?
  startDate    DateTime
  endDate      DateTime?
  location     String?
  address      String?
  city         String?
  province     String?
  zipCode      String?
  country      String?
  price        Float?    @default(0)
  maxAttendees Int?
  imageUrls    String[]  @default([])
  isActive     Boolean   @default(true)
  isFeatured   Boolean   @default(false)
  tags         String[]  @default([])
  contactEmail String?
  contactPhone String?
  websiteUrl   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  siteId       String
  site         Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("events")
}

model EventService {
  id           String   @id @default(cuid())
  name         String
  description  String?
  basePrice    Float?   @default(0)
  isActive     Boolean  @default(true)
  isFeatured   Boolean  @default(false)
  category     String?
  duration     String?
  inclusions   String[] @default([])
  addOns       Json?
  freebies     String[] @default([])
  contactEmail String?
  contactPhone String?
  bookingUrl   String?
  tags         String[] @default([])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  siteId       String
  site         Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("event_services")
}

model SiteFeature {
  id          String      @id @default(cuid())
  siteId      String
  name        FeatureName
  description String?
  site        Site        @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, name])
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
}

enum SiteRole {
  ADMIN
  EDITOR
  VIEWER
}

enum SitePackage {
  BASIC
  STANDARD
  PREMIUM
  ENTERPRISE
}

enum FeatureName {
  DASHBOARD
  PRODUCTS
  CATEGORIES
  EVENTS
  EVENT_SERVICES
  ABOUT
  CONTACT
}
